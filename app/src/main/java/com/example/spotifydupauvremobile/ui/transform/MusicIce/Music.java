//
// Copyright (c) ZeroC, Inc. All rights reserved.
//
//
// Ice version 3.7.10
//
// <auto-generated>
//
// Generated from file `Music.ice'
//
// Warning: do not edit this file.
//
// </auto-generated>
//

package com.example.spotifydupauvremobile.ui.transform.MusicIce;

public interface Music extends com.zeroc.Ice.Object
{
    boolean ajoutMusique(String titre, String auteur, String fichierAudio, com.zeroc.Ice.Current current);

    boolean supprimerMusique(String titre, com.zeroc.Ice.Current current);

    boolean modifierMusique(String titre, String nouveauTitre, String nouvelAuteur, String nouveauFichierAudio, com.zeroc.Ice.Current current);

    void envoyerMusique(String titre, String auteur, String chunk, com.zeroc.Ice.Current current);

    void rechercherParTitre(String titre, com.zeroc.Ice.Current current);

    void rechercherParAuteur(String auteur, com.zeroc.Ice.Current current);

    boolean play(String titre, com.zeroc.Ice.Current current);

    boolean stop(com.zeroc.Ice.Current current);

    String[] listerMusiques(com.zeroc.Ice.Current current);

    /** @hidden */
    static final String[] _iceIds =
    {
        "::Ice::Object",
        "::MusicIce::Music"
    };

    @Override
    default String[] ice_ids(com.zeroc.Ice.Current current)
    {
        return _iceIds;
    }

    @Override
    default String ice_id(com.zeroc.Ice.Current current)
    {
        return ice_staticId();
    }

    static String ice_staticId()
    {
        return "::MusicIce::Music";
    }

    /**
     * @hidden
     * @param obj -
     * @param inS -
     * @param current -
     * @return -
    **/
    static java.util.concurrent.CompletionStage<com.zeroc.Ice.OutputStream> _iceD_ajoutMusique(Music obj, final com.zeroc.IceInternal.Incoming inS, com.zeroc.Ice.Current current)
    {
        com.zeroc.Ice.Object._iceCheckMode(null, current.mode);
        com.zeroc.Ice.InputStream istr = inS.startReadParams();
        String iceP_titre;
        String iceP_auteur;
        String iceP_fichierAudio;
        iceP_titre = istr.readString();
        iceP_auteur = istr.readString();
        iceP_fichierAudio = istr.readString();
        inS.endReadParams();
        boolean ret = obj.ajoutMusique(iceP_titre, iceP_auteur, iceP_fichierAudio, current);
        com.zeroc.Ice.OutputStream ostr = inS.startWriteParams();
        ostr.writeBool(ret);
        inS.endWriteParams(ostr);
        return inS.setResult(ostr);
    }

    /**
     * @hidden
     * @param obj -
     * @param inS -
     * @param current -
     * @return -
    **/
    static java.util.concurrent.CompletionStage<com.zeroc.Ice.OutputStream> _iceD_supprimerMusique(Music obj, final com.zeroc.IceInternal.Incoming inS, com.zeroc.Ice.Current current)
    {
        com.zeroc.Ice.Object._iceCheckMode(null, current.mode);
        com.zeroc.Ice.InputStream istr = inS.startReadParams();
        String iceP_titre;
        iceP_titre = istr.readString();
        inS.endReadParams();
        boolean ret = obj.supprimerMusique(iceP_titre, current);
        com.zeroc.Ice.OutputStream ostr = inS.startWriteParams();
        ostr.writeBool(ret);
        inS.endWriteParams(ostr);
        return inS.setResult(ostr);
    }

    /**
     * @hidden
     * @param obj -
     * @param inS -
     * @param current -
     * @return -
    **/
    static java.util.concurrent.CompletionStage<com.zeroc.Ice.OutputStream> _iceD_modifierMusique(Music obj, final com.zeroc.IceInternal.Incoming inS, com.zeroc.Ice.Current current)
    {
        com.zeroc.Ice.Object._iceCheckMode(null, current.mode);
        com.zeroc.Ice.InputStream istr = inS.startReadParams();
        String iceP_titre;
        String iceP_nouveauTitre;
        String iceP_nouvelAuteur;
        String iceP_nouveauFichierAudio;
        iceP_titre = istr.readString();
        iceP_nouveauTitre = istr.readString();
        iceP_nouvelAuteur = istr.readString();
        iceP_nouveauFichierAudio = istr.readString();
        inS.endReadParams();
        boolean ret = obj.modifierMusique(iceP_titre, iceP_nouveauTitre, iceP_nouvelAuteur, iceP_nouveauFichierAudio, current);
        com.zeroc.Ice.OutputStream ostr = inS.startWriteParams();
        ostr.writeBool(ret);
        inS.endWriteParams(ostr);
        return inS.setResult(ostr);
    }

    /**
     * @hidden
     * @param obj -
     * @param inS -
     * @param current -
     * @return -
    **/
    static java.util.concurrent.CompletionStage<com.zeroc.Ice.OutputStream> _iceD_envoyerMusique(Music obj, final com.zeroc.IceInternal.Incoming inS, com.zeroc.Ice.Current current)
    {
        com.zeroc.Ice.Object._iceCheckMode(null, current.mode);
        com.zeroc.Ice.InputStream istr = inS.startReadParams();
        String iceP_titre;
        String iceP_auteur;
        String iceP_chunk;
        iceP_titre = istr.readString();
        iceP_auteur = istr.readString();
        iceP_chunk = istr.readString();
        inS.endReadParams();
        obj.envoyerMusique(iceP_titre, iceP_auteur, iceP_chunk, current);
        return inS.setResult(inS.writeEmptyParams());
    }

    /**
     * @hidden
     * @param obj -
     * @param inS -
     * @param current -
     * @return -
    **/
    static java.util.concurrent.CompletionStage<com.zeroc.Ice.OutputStream> _iceD_rechercherParTitre(Music obj, final com.zeroc.IceInternal.Incoming inS, com.zeroc.Ice.Current current)
    {
        com.zeroc.Ice.Object._iceCheckMode(com.zeroc.Ice.OperationMode.Idempotent, current.mode);
        com.zeroc.Ice.InputStream istr = inS.startReadParams();
        String iceP_titre;
        iceP_titre = istr.readString();
        inS.endReadParams();
        obj.rechercherParTitre(iceP_titre, current);
        return inS.setResult(inS.writeEmptyParams());
    }

    /**
     * @hidden
     * @param obj -
     * @param inS -
     * @param current -
     * @return -
    **/
    static java.util.concurrent.CompletionStage<com.zeroc.Ice.OutputStream> _iceD_rechercherParAuteur(Music obj, final com.zeroc.IceInternal.Incoming inS, com.zeroc.Ice.Current current)
    {
        com.zeroc.Ice.Object._iceCheckMode(com.zeroc.Ice.OperationMode.Idempotent, current.mode);
        com.zeroc.Ice.InputStream istr = inS.startReadParams();
        String iceP_auteur;
        iceP_auteur = istr.readString();
        inS.endReadParams();
        obj.rechercherParAuteur(iceP_auteur, current);
        return inS.setResult(inS.writeEmptyParams());
    }

    /**
     * @hidden
     * @param obj -
     * @param inS -
     * @param current -
     * @return -
    **/
    static java.util.concurrent.CompletionStage<com.zeroc.Ice.OutputStream> _iceD_play(Music obj, final com.zeroc.IceInternal.Incoming inS, com.zeroc.Ice.Current current)
    {
        com.zeroc.Ice.Object._iceCheckMode(null, current.mode);
        com.zeroc.Ice.InputStream istr = inS.startReadParams();
        String iceP_titre;
        iceP_titre = istr.readString();
        inS.endReadParams();
        boolean ret = obj.play(iceP_titre, current);
        com.zeroc.Ice.OutputStream ostr = inS.startWriteParams();
        ostr.writeBool(ret);
        inS.endWriteParams(ostr);
        return inS.setResult(ostr);
    }

    /**
     * @hidden
     * @param obj -
     * @param inS -
     * @param current -
     * @return -
    **/
    static java.util.concurrent.CompletionStage<com.zeroc.Ice.OutputStream> _iceD_stop(Music obj, final com.zeroc.IceInternal.Incoming inS, com.zeroc.Ice.Current current)
    {
        com.zeroc.Ice.Object._iceCheckMode(null, current.mode);
        inS.readEmptyParams();
        boolean ret = obj.stop(current);
        com.zeroc.Ice.OutputStream ostr = inS.startWriteParams();
        ostr.writeBool(ret);
        inS.endWriteParams(ostr);
        return inS.setResult(ostr);
    }

    /**
     * @hidden
     * @param obj -
     * @param inS -
     * @param current -
     * @return -
    **/
    static java.util.concurrent.CompletionStage<com.zeroc.Ice.OutputStream> _iceD_listerMusiques(Music obj, final com.zeroc.IceInternal.Incoming inS, com.zeroc.Ice.Current current)
    {
        com.zeroc.Ice.Object._iceCheckMode(null, current.mode);
        inS.readEmptyParams();
        String[] ret = obj.listerMusiques(current);
        com.zeroc.Ice.OutputStream ostr = inS.startWriteParams();
        ostr.writeStringSeq(ret);
        inS.endWriteParams(ostr);
        return inS.setResult(ostr);
    }

    /** @hidden */
    final static String[] _iceOps =
    {
        "ajoutMusique",
        "envoyerMusique",
        "ice_id",
        "ice_ids",
        "ice_isA",
        "ice_ping",
        "listerMusiques",
        "modifierMusique",
        "play",
        "rechercherParAuteur",
        "rechercherParTitre",
        "stop",
        "supprimerMusique"
    };

    /** @hidden */
    @Override
    default java.util.concurrent.CompletionStage<com.zeroc.Ice.OutputStream> _iceDispatch(com.zeroc.IceInternal.Incoming in, com.zeroc.Ice.Current current)
        throws com.zeroc.Ice.UserException
    {
        int pos = java.util.Arrays.binarySearch(_iceOps, current.operation);
        if(pos < 0)
        {
            throw new com.zeroc.Ice.OperationNotExistException(current.id, current.facet, current.operation);
        }

        switch(pos)
        {
            case 0:
            {
                return _iceD_ajoutMusique(this, in, current);
            }
            case 1:
            {
                return _iceD_envoyerMusique(this, in, current);
            }
            case 2:
            {
                return com.zeroc.Ice.Object._iceD_ice_id(this, in, current);
            }
            case 3:
            {
                return com.zeroc.Ice.Object._iceD_ice_ids(this, in, current);
            }
            case 4:
            {
                return com.zeroc.Ice.Object._iceD_ice_isA(this, in, current);
            }
            case 5:
            {
                return com.zeroc.Ice.Object._iceD_ice_ping(this, in, current);
            }
            case 6:
            {
                return _iceD_listerMusiques(this, in, current);
            }
            case 7:
            {
                return _iceD_modifierMusique(this, in, current);
            }
            case 8:
            {
                return _iceD_play(this, in, current);
            }
            case 9:
            {
                return _iceD_rechercherParAuteur(this, in, current);
            }
            case 10:
            {
                return _iceD_rechercherParTitre(this, in, current);
            }
            case 11:
            {
                return _iceD_stop(this, in, current);
            }
            case 12:
            {
                return _iceD_supprimerMusique(this, in, current);
            }
        }

        assert(false);
        throw new com.zeroc.Ice.OperationNotExistException(current.id, current.facet, current.operation);
    }
}
