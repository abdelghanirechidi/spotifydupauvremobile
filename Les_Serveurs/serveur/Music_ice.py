# -*- coding: utf-8 -*-
#
# Copyright (c) ZeroC, Inc. All rights reserved.
#
#
# Ice version 3.7.10
#
# <auto-generated>
#
# Generated from file `Music.ice'
#
# Warning: do not edit this file.
#
# </auto-generated>
#

from sys import version_info as _version_info_
import Ice, IcePy

# Start of module MusicIce
_M_MusicIce = Ice.openModule('MusicIce')
__name__ = 'MusicIce'

if '_t_listes' not in _M_MusicIce.__dict__:
    _M_MusicIce._t_listes = IcePy.defineSequence('::MusicIce::listes', (), IcePy._t_string)

_M_MusicIce._t_Music = IcePy.defineValue('::MusicIce::Music', Ice.Value, -1, (), False, True, None, ())

if 'MusicPrx' not in _M_MusicIce.__dict__:
    _M_MusicIce.MusicPrx = Ice.createTempClass()
    class MusicPrx(Ice.ObjectPrx):

        def ajoutMusique(self, titre, auteur, fichierAudio, context=None):
            return _M_MusicIce.Music._op_ajoutMusique.invoke(self, ((titre, auteur, fichierAudio), context))

        def ajoutMusiqueAsync(self, titre, auteur, fichierAudio, context=None):
            return _M_MusicIce.Music._op_ajoutMusique.invokeAsync(self, ((titre, auteur, fichierAudio), context))

        def begin_ajoutMusique(self, titre, auteur, fichierAudio, _response=None, _ex=None, _sent=None, context=None):
            return _M_MusicIce.Music._op_ajoutMusique.begin(self, ((titre, auteur, fichierAudio), _response, _ex, _sent, context))

        def end_ajoutMusique(self, _r):
            return _M_MusicIce.Music._op_ajoutMusique.end(self, _r)

        def supprimerMusique(self, titre, context=None):
            return _M_MusicIce.Music._op_supprimerMusique.invoke(self, ((titre, ), context))

        def supprimerMusiqueAsync(self, titre, context=None):
            return _M_MusicIce.Music._op_supprimerMusique.invokeAsync(self, ((titre, ), context))

        def begin_supprimerMusique(self, titre, _response=None, _ex=None, _sent=None, context=None):
            return _M_MusicIce.Music._op_supprimerMusique.begin(self, ((titre, ), _response, _ex, _sent, context))

        def end_supprimerMusique(self, _r):
            return _M_MusicIce.Music._op_supprimerMusique.end(self, _r)

        def modifierMusique(self, titre, nouveauTitre, nouvelAuteur, nouveauFichierAudio, context=None):
            return _M_MusicIce.Music._op_modifierMusique.invoke(self, ((titre, nouveauTitre, nouvelAuteur, nouveauFichierAudio), context))

        def modifierMusiqueAsync(self, titre, nouveauTitre, nouvelAuteur, nouveauFichierAudio, context=None):
            return _M_MusicIce.Music._op_modifierMusique.invokeAsync(self, ((titre, nouveauTitre, nouvelAuteur, nouveauFichierAudio), context))

        def begin_modifierMusique(self, titre, nouveauTitre, nouvelAuteur, nouveauFichierAudio, _response=None, _ex=None, _sent=None, context=None):
            return _M_MusicIce.Music._op_modifierMusique.begin(self, ((titre, nouveauTitre, nouvelAuteur, nouveauFichierAudio), _response, _ex, _sent, context))

        def end_modifierMusique(self, _r):
            return _M_MusicIce.Music._op_modifierMusique.end(self, _r)

        def envoyerMusique(self, titre, auteur, chunk, context=None):
            return _M_MusicIce.Music._op_envoyerMusique.invoke(self, ((titre, auteur, chunk), context))

        def envoyerMusiqueAsync(self, titre, auteur, chunk, context=None):
            return _M_MusicIce.Music._op_envoyerMusique.invokeAsync(self, ((titre, auteur, chunk), context))

        def begin_envoyerMusique(self, titre, auteur, chunk, _response=None, _ex=None, _sent=None, context=None):
            return _M_MusicIce.Music._op_envoyerMusique.begin(self, ((titre, auteur, chunk), _response, _ex, _sent, context))

        def end_envoyerMusique(self, _r):
            return _M_MusicIce.Music._op_envoyerMusique.end(self, _r)

        def rechercherParTitre(self, titre, context=None):
            return _M_MusicIce.Music._op_rechercherParTitre.invoke(self, ((titre, ), context))

        def rechercherParTitreAsync(self, titre, context=None):
            return _M_MusicIce.Music._op_rechercherParTitre.invokeAsync(self, ((titre, ), context))

        def begin_rechercherParTitre(self, titre, _response=None, _ex=None, _sent=None, context=None):
            return _M_MusicIce.Music._op_rechercherParTitre.begin(self, ((titre, ), _response, _ex, _sent, context))

        def end_rechercherParTitre(self, _r):
            return _M_MusicIce.Music._op_rechercherParTitre.end(self, _r)

        def rechercherParAuteur(self, auteur, context=None):
            return _M_MusicIce.Music._op_rechercherParAuteur.invoke(self, ((auteur, ), context))

        def rechercherParAuteurAsync(self, auteur, context=None):
            return _M_MusicIce.Music._op_rechercherParAuteur.invokeAsync(self, ((auteur, ), context))

        def begin_rechercherParAuteur(self, auteur, _response=None, _ex=None, _sent=None, context=None):
            return _M_MusicIce.Music._op_rechercherParAuteur.begin(self, ((auteur, ), _response, _ex, _sent, context))

        def end_rechercherParAuteur(self, _r):
            return _M_MusicIce.Music._op_rechercherParAuteur.end(self, _r)

        def play(self, titre, context=None):
            return _M_MusicIce.Music._op_play.invoke(self, ((titre, ), context))

        def playAsync(self, titre, context=None):
            return _M_MusicIce.Music._op_play.invokeAsync(self, ((titre, ), context))

        def begin_play(self, titre, _response=None, _ex=None, _sent=None, context=None):
            return _M_MusicIce.Music._op_play.begin(self, ((titre, ), _response, _ex, _sent, context))

        def end_play(self, _r):
            return _M_MusicIce.Music._op_play.end(self, _r)

        def stop(self, context=None):
            return _M_MusicIce.Music._op_stop.invoke(self, ((), context))

        def stopAsync(self, context=None):
            return _M_MusicIce.Music._op_stop.invokeAsync(self, ((), context))

        def begin_stop(self, _response=None, _ex=None, _sent=None, context=None):
            return _M_MusicIce.Music._op_stop.begin(self, ((), _response, _ex, _sent, context))

        def end_stop(self, _r):
            return _M_MusicIce.Music._op_stop.end(self, _r)

        def listerMusiques(self, context=None):
            return _M_MusicIce.Music._op_listerMusiques.invoke(self, ((), context))

        def listerMusiquesAsync(self, context=None):
            return _M_MusicIce.Music._op_listerMusiques.invokeAsync(self, ((), context))

        def begin_listerMusiques(self, _response=None, _ex=None, _sent=None, context=None):
            return _M_MusicIce.Music._op_listerMusiques.begin(self, ((), _response, _ex, _sent, context))

        def end_listerMusiques(self, _r):
            return _M_MusicIce.Music._op_listerMusiques.end(self, _r)

        @staticmethod
        def checkedCast(proxy, facetOrContext=None, context=None):
            return _M_MusicIce.MusicPrx.ice_checkedCast(proxy, '::MusicIce::Music', facetOrContext, context)

        @staticmethod
        def uncheckedCast(proxy, facet=None):
            return _M_MusicIce.MusicPrx.ice_uncheckedCast(proxy, facet)

        @staticmethod
        def ice_staticId():
            return '::MusicIce::Music'
    _M_MusicIce._t_MusicPrx = IcePy.defineProxy('::MusicIce::Music', MusicPrx)

    _M_MusicIce.MusicPrx = MusicPrx
    del MusicPrx

    _M_MusicIce.Music = Ice.createTempClass()
    class Music(Ice.Object):

        def ice_ids(self, current=None):
            return ('::Ice::Object', '::MusicIce::Music')

        def ice_id(self, current=None):
            return '::MusicIce::Music'

        @staticmethod
        def ice_staticId():
            return '::MusicIce::Music'

        def ajoutMusique(self, titre, auteur, fichierAudio, current=None):
            raise NotImplementedError("servant method 'ajoutMusique' not implemented")

        def supprimerMusique(self, titre, current=None):
            raise NotImplementedError("servant method 'supprimerMusique' not implemented")

        def modifierMusique(self, titre, nouveauTitre, nouvelAuteur, nouveauFichierAudio, current=None):
            raise NotImplementedError("servant method 'modifierMusique' not implemented")

        def envoyerMusique(self, titre, auteur, chunk, current=None):
            raise NotImplementedError("servant method 'envoyerMusique' not implemented")

        def rechercherParTitre(self, titre, current=None):
            raise NotImplementedError("servant method 'rechercherParTitre' not implemented")

        def rechercherParAuteur(self, auteur, current=None):
            raise NotImplementedError("servant method 'rechercherParAuteur' not implemented")

        def play(self, titre, current=None):
            raise NotImplementedError("servant method 'play' not implemented")

        def stop(self, current=None):
            raise NotImplementedError("servant method 'stop' not implemented")

        def listerMusiques(self, current=None):
            raise NotImplementedError("servant method 'listerMusiques' not implemented")

        def __str__(self):
            return IcePy.stringify(self, _M_MusicIce._t_MusicDisp)

        __repr__ = __str__

    _M_MusicIce._t_MusicDisp = IcePy.defineClass('::MusicIce::Music', Music, (), None, ())
    Music._ice_type = _M_MusicIce._t_MusicDisp

    Music._op_ajoutMusique = IcePy.Operation('ajoutMusique', Ice.OperationMode.Normal, Ice.OperationMode.Normal, False, None, (), (((), IcePy._t_string, False, 0), ((), IcePy._t_string, False, 0), ((), IcePy._t_string, False, 0)), (), ((), IcePy._t_bool, False, 0), ())
    Music._op_supprimerMusique = IcePy.Operation('supprimerMusique', Ice.OperationMode.Normal, Ice.OperationMode.Normal, False, None, (), (((), IcePy._t_string, False, 0),), (), ((), IcePy._t_bool, False, 0), ())
    Music._op_modifierMusique = IcePy.Operation('modifierMusique', Ice.OperationMode.Normal, Ice.OperationMode.Normal, False, None, (), (((), IcePy._t_string, False, 0), ((), IcePy._t_string, False, 0), ((), IcePy._t_string, False, 0), ((), IcePy._t_string, False, 0)), (), ((), IcePy._t_bool, False, 0), ())
    Music._op_envoyerMusique = IcePy.Operation('envoyerMusique', Ice.OperationMode.Normal, Ice.OperationMode.Normal, False, None, (), (((), IcePy._t_string, False, 0), ((), IcePy._t_string, False, 0), ((), IcePy._t_string, False, 0)), (), None, ())
    Music._op_rechercherParTitre = IcePy.Operation('rechercherParTitre', Ice.OperationMode.Idempotent, Ice.OperationMode.Idempotent, False, None, (), (((), IcePy._t_string, False, 0),), (), None, ())
    Music._op_rechercherParAuteur = IcePy.Operation('rechercherParAuteur', Ice.OperationMode.Idempotent, Ice.OperationMode.Idempotent, False, None, (), (((), IcePy._t_string, False, 0),), (), None, ())
    Music._op_play = IcePy.Operation('play', Ice.OperationMode.Normal, Ice.OperationMode.Normal, False, None, (), (((), IcePy._t_string, False, 0),), (), ((), IcePy._t_bool, False, 0), ())
    Music._op_stop = IcePy.Operation('stop', Ice.OperationMode.Normal, Ice.OperationMode.Normal, False, None, (), (), (), ((), IcePy._t_bool, False, 0), ())
    Music._op_listerMusiques = IcePy.Operation('listerMusiques', Ice.OperationMode.Normal, Ice.OperationMode.Normal, False, None, (), (), (), ((), _M_MusicIce._t_listes, False, 0), ())

    _M_MusicIce.Music = Music
    del Music

# End of module MusicIce
